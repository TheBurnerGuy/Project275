#Pls put into algorithm.py for use #UNTESTED LMAO#
import Game
import copy

class Utilities():
	def distance_to_boss(gameMap,characterTile):
		'''
		Explanation:
		'''
		#Travel vertically until on the same width
		#Travel horizontally until reach boss
		bossTile = gameMap.end
		mapWidth = gameMap.width
		if characterTile > bossTile:
			if characterTile % mapWidth < bossTile % mapWidth:
				tiles = (characterTile + mapWidth - bossTile) // mapWidth
			else:
				tiles = (characterTile - bossTile) // mapWidth
			tileOn = characterTile - (mapWidth * tiles)
		elif characterTile < bossTile:
			if characterTile % mapWidth > bossTile % mapWidth:
				tiles = (bossTile - characterTile + mapWidth) // mapWidth
			else:
				tiles = (bossTile - characterTile) // mapWidth
			tileOn = characterTile + (mapWidth * tiles)
		tiles += abs(tileOn - bossTile)
		return tiles
	
	def is_reachable(gameMap,character,turns):
		'''
		Explanation:
		Note: Does not account for hills or gates
		'''
		if turns < distance_to_boss(gameMap,character):
			return False
		return True
	
	def boss_direction(gameMap,characterTile):
		'''
		Explanation: Returns a list of possible directions.
		'''
		directions = set()
		bossTile = gameMap.end
		#Check horizontal first
		bossHoriz = bossTile % gameMap.width
		characterHoriz = characterTile % gameMap.width
		horizDiff = characterHoriz - bossHoriz
		if horizDiff < 0:
			directions.add("right")
		elif horizDiff > 0:
			directions.add("left")
	
		if characterTile - horizDiff != bossTile:
			#If not on same horizontal plane, check vertical.
			if bossTile > characterTile:
				directions.add("down")
			else:
				directions.add("up")
		return directions

	def minXP(gameMap, character):
		def recurse(gameMap, character):
			directions = boss_direction(gameMap, character.tileOn.idx)
			for direction in directions:
				tile = Game.Movement.getTileInDir(direction)
				if tile != None:
					if tile.requirement == "gate" and character.gear[1] == None:
						directions.remove(direction)
						continue
				if tile.requirement == "hill" and character.gear[0] == None:
					directions.remove(direction)
					continue
			if len(directions) == 2:
				#Compare distances, can be maximum of 2 directions
				lol = Game.Movement.getTileInDir(directions[0])
	
		return recurse(gameMap, character)
	
